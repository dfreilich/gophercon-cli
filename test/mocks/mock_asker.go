// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dfreilich/gophercon-cli/cmd (interfaces: Asker)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gogpt "github.com/sashabaranov/go-gpt3"
)

// MockAsker is a mock of Asker interface.
type MockAsker struct {
	ctrl     *gomock.Controller
	recorder *MockAskerMockRecorder
}

// MockAskerMockRecorder is the mock recorder for MockAsker.
type MockAskerMockRecorder struct {
	mock *MockAsker
}

// NewMockAsker creates a new mock instance.
func NewMockAsker(ctrl *gomock.Controller) *MockAsker {
	mock := &MockAsker{ctrl: ctrl}
	mock.recorder = &MockAskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsker) EXPECT() *MockAskerMockRecorder {
	return m.recorder
}

// CreateCompletion mocks base method.
func (m *MockAsker) CreateCompletion(arg0 context.Context, arg1 gogpt.CompletionRequest) (gogpt.CompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompletion", arg0, arg1)
	ret0, _ := ret[0].(gogpt.CompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompletion indicates an expected call of CreateCompletion.
func (mr *MockAskerMockRecorder) CreateCompletion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompletion", reflect.TypeOf((*MockAsker)(nil).CreateCompletion), arg0, arg1)
}
